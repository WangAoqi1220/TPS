// This file is generated by NewEdenPythonBinding Tool
#include "NePyStruct_SlateApplication.h"
#include "Misc/AssertionMacros.h"
#include "Runtime/Launch/Resources/Version.h"
// region include begin
#include "NePyAutoExport.h"
#include "Runtime/Slate/Public/Framework/Application/SlateApplication.h"
#include "Runtime/SlateRHIRenderer/Public/Interfaces/ISlateRHIRendererModule.h"
// region include end

#if WITH_NEPY_AUTO_EXPORT
static PyTypeObject FNePyStructType_SlateApplication = {
	PyVarObject_HEAD_INIT(nullptr, 0)
	"SlateApplication", /* tp_name */
	sizeof(FNePyStruct_SlateApplication), /* tp_basicsize */
};

// region prop getset body begin

// region prop getset body end

static PyGetSetDef FNePyStructType_SlateApplication_getset[] = {
	
	{ nullptr } /* Sentinel */
};

// region func body begin
PyObject* FNePyStruct_SlateApplication_GetAverageDeltaTime(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetAverageDeltaTime();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetDeltaTime(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetDeltaTime();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetAverageDeltaTimeForResponsiveness(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetAverageDeltaTimeForResponsiveness();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_Create(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::InitHighDPI(true);
	FSlateApplication::Create();

	TSharedRef<FSlateRenderer> SlateRenderer = FModuleManager::Get().LoadModuleChecked<ISlateRHIRendererModule>("SlateRHIRenderer").CreateSlateRHIRenderer();
	FSlateApplication::Get().InitializeRenderer(SlateRenderer);

	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsInitialized(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::IsInitialized();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_Shutdown(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bShutdownPlatform;
	if (!NePyBase::ToCpp(PyArgs[0], bShutdownPlatform))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bShutdownPlatform' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Shutdown(bShutdownPlatform);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_InitHighDPI(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bForceEnable;
	if (!NePyBase::ToCpp(PyArgs[0], bForceEnable))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bForceEnable' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::InitHighDPI(bForceEnable);
	Py_RETURN_NONE;
}

#if ENGINE_MINOR_VERSION < 26
PyObject* FNePyStruct_SlateApplication_DestroyRenderer(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().DestroyRenderer();
	Py_RETURN_NONE;
}
#endif

PyObject* FNePyStruct_SlateApplication_SupportsSystemHelp(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().SupportsSystemHelp();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_ShowSystemHelp(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ShowSystemHelp();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_SetCursorPos(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	FVector2D* MouseCoordinate;
	if (FNePyStruct_Vector2D* PyMouseCoordinate = NePyStructCheck_Vector2D(PyArgs[0]))
	{
		MouseCoordinate = &PyMouseCoordinate->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'MouseCoordinate' must have type 'Vector2D'");
		return nullptr;
	}

	FSlateApplication::Get().SetCursorPos(*MouseCoordinate);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_PollGameDeviceState(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().PollGameDeviceState();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_FinishedInputThisFrame(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().FinishedInputThisFrame();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_Tick(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	uint8 TickTypeTemp;
	if (!NePyBase::ToCpp(PyArgs[0], TickTypeTemp))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'TickType' must have type 'int'(ESlateTickType)");
		return nullptr;
	}
	ESlateTickType TickType = (ESlateTickType)TickTypeTemp;

	FSlateApplication::Get().Tick(TickType);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_PumpMessages(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().PumpMessages();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_CanAddModalWindow(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().CanAddModalWindow();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_CanDisplayWindows(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().CanDisplayWindows();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_AnyMenusVisible(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().AnyMenusVisible();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_DismissAllMenus(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().DismissAllMenus();
	Py_RETURN_NONE;
}


PyObject* FNePyStruct_SlateApplication_ExternalModalStart(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ExternalModalStart();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ExternalModalStop(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ExternalModalStop();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_InvalidateAllViewports(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().InvalidateAllViewports();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_UnregisterGameViewport(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().UnregisterGameViewport();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_FlushRenderState(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().FlushRenderState();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_SetUserFocusToGameViewport(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[2] = {nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OO:SetUserFocusToGameViewport", &PyArgs[0], &PyArgs[1]))
	{
		return nullptr;
	}

	uint32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'UserIndex' must have type 'int'");
		return nullptr;
	}

	int32 ReasonFocusIsChanging;
	if (!NePyBase::ToCpp(PyArgs[1], ReasonFocusIsChanging))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'ReasonFocusIsChanging' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().SetUserFocusToGameViewport(UserIndex, (EFocusCause)ReasonFocusIsChanging);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_SetAllUserFocusToGameViewport(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 ReasonFocusIsChanging;
	if (!NePyBase::ToCpp(PyArgs[0], ReasonFocusIsChanging))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'ReasonFocusIsChanging' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().SetAllUserFocusToGameViewport((EFocusCause)ReasonFocusIsChanging);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ActivateGameViewport(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ActivateGameViewport();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ClearUserFocus(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[2] = {nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OO:ClearUserFocus", &PyArgs[0], &PyArgs[1]))
	{
		return nullptr;
	}

	uint32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'UserIndex' must have type 'int'");
		return nullptr;
	}

	int32 ReasonFocusIsChanging;
	if (!NePyBase::ToCpp(PyArgs[1], ReasonFocusIsChanging))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'ReasonFocusIsChanging' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().ClearUserFocus(UserIndex, (EFocusCause)ReasonFocusIsChanging);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ClearAllUserFocus(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 ReasonFocusIsChanging;
	if (!NePyBase::ToCpp(PyArgs[0], ReasonFocusIsChanging))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'ReasonFocusIsChanging' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().ClearAllUserFocus((EFocusCause)ReasonFocusIsChanging);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ClearKeyboardFocus(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 ReasonFocusIsChanging;
	if (!NePyBase::ToCpp(PyArgs[0], ReasonFocusIsChanging))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'ReasonFocusIsChanging' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().ClearKeyboardFocus((EFocusCause)ReasonFocusIsChanging);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ResetToDefaultInputSettings(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ResetToDefaultInputSettings();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ResetToDefaultPointerInputSettings(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ResetToDefaultPointerInputSettings();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ReleaseAllPointerCapture_Overload1(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	FSlateApplication::Get().ReleaseAllPointerCapture();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ReleaseAllPointerCapture_Overload2(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[1] = {nullptr};
	if (!PyArg_ParseTuple(InArgs, "O:ReleaseAllPointerCapture_Overload2", &PyArgs[0]))
	{
		return nullptr;
	}

	int32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		return nullptr;
	}

	FSlateApplication::Get().ReleaseAllPointerCapture(UserIndex);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ReleaseAllPointerCapture(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	int32 ArgCount = (int32)PyTuple_Size(InArgs);
	PyObject* PyRetVal = nullptr;

	if (ArgCount == 0)
	{
		PyRetVal = FNePyStruct_SlateApplication_ReleaseAllPointerCapture_Overload1(InSelf, InArgs);
		if (PyRetVal)
		{
			return PyRetVal;
		}
		PyErr_Clear();
	}

	if (ArgCount == 1)
	{
		PyRetVal = FNePyStruct_SlateApplication_ReleaseAllPointerCapture_Overload2(InSelf, InArgs);
		if (PyRetVal)
		{
			return PyRetVal;
		}
		PyErr_Clear();
	}

	PyErr_SetString(PyExc_RuntimeError, "can't resolve overload function 'ReleaseAllPointerCapture' on 'FSlateApplication'");
	return nullptr;
}

#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION <= 23
PyObject* FNePyStruct_SlateApplication_ReleaseMouseCapture(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().ReleaseMouseCapture();
	Py_RETURN_NONE;
}
#endif

#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION <= 23
PyObject* FNePyStruct_SlateApplication_ReleaseMouseCaptureForUser(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'UserIndex' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().ReleaseMouseCaptureForUser(UserIndex);
	Py_RETURN_NONE;
}
#endif

PyObject* FNePyStruct_SlateApplication_IsUsingHighPrecisionMouseMovment(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsUsingHighPrecisionMouseMovment();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsUsingTrackpad(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsUsingTrackpad();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsMouseAttached(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsMouseAttached();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsGamepadAttached(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsGamepadAttached();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}


PyObject* FNePyStruct_SlateApplication_SetApplicationScale(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	float InScale;
	if (!NePyBase::ToCpp(PyArgs[0], InScale))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'InScale' must have type 'float'");
		return nullptr;
	}

	FSlateApplication::Get().SetApplicationScale(InScale);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsDragDropping(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsDragDropping();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_CancelDragDrop(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().CancelDragDrop();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsNormalExecution(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsNormalExecution();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_InKismetDebuggingMode(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().InKismetDebuggingMode();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_EnterDebuggingMode(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().EnterDebuggingMode();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_LeaveDebuggingMode(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bLeavingDebugForSingleStep;
	if (!NePyBase::ToCpp(PyArgs[0], bLeavingDebugForSingleStep))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bLeavingDebugForSingleStep' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().LeaveDebuggingMode(bLeavingDebugForSingleStep);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsRunningAtTargetFrameRate(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsRunningAtTargetFrameRate();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_AreMenuAnimationsEnabled(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().AreMenuAnimationsEnabled();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_EnableMenuAnimations(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bEnableAnimations;
	if (!NePyBase::ToCpp(PyArgs[0], bEnableAnimations))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bEnableAnimations' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().EnableMenuAnimations(bEnableAnimations);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ExternalUIChange(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bIsOpening;
	if (!NePyBase::ToCpp(PyArgs[0], bIsOpening))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bIsOpening' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().ExternalUIChange(bIsOpening);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_AllowMoveCursor(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().AllowMoveCursor();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_NativeApp_ShowKeyboard(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[4] = {nullptr, nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOOO:NativeApp_ShowKeyboard", &PyArgs[0], &PyArgs[1], &PyArgs[2], &PyArgs[3]))
	{
		return nullptr;
	}

	bool bShow;
	if (!NePyBase::ToCpp(PyArgs[0], bShow))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bShow' must have type 'bool'");
		return nullptr;
	}

	FString InitialString;
	if (!NePyBase::ToCpp(PyArgs[1], InitialString))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'InitialString' must have type 'str'");
		return nullptr;
	}

	int32 SelectionStart;
	if (!NePyBase::ToCpp(PyArgs[2], SelectionStart))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'SelectionStart' must have type 'int'");
		return nullptr;
	}

	int32 SelectionEnd;
	if (!NePyBase::ToCpp(PyArgs[3], SelectionEnd))
	{
		PyErr_SetString(PyExc_TypeError, "arg4 'SelectionEnd' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().NativeApp_ShowKeyboard(bShow, InitialString, SelectionStart, SelectionEnd);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_SupportsSourceAccess(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().SupportsSourceAccess();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GotoLineInSource(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[2] = {nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OO:GotoLineInSource", &PyArgs[0], &PyArgs[1]))
	{
		return nullptr;
	}

	FString FileName;
	if (!NePyBase::ToCpp(PyArgs[0], FileName))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'FileName' must have type 'str'");
		return nullptr;
	}

	int32 LineNumber;
	if (!NePyBase::ToCpp(PyArgs[1], LineNumber))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'LineNumber' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().GotoLineInSource(FileName, LineNumber);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_UnregisterUser(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'UserIndex' must have type 'int'");
		return nullptr;
	}

	FSlateApplication::Get().UnregisterUser(UserIndex);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_ProcessApplicationActivationEvent(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool InAppActivated;
	if (!NePyBase::ToCpp(PyArgs[0], InAppActivated))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'InAppActivated' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().ProcessApplicationActivationEvent(InAppActivated);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsProcessingInput(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsProcessingInput();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

#if ENGINE_MINOR_VERSION < 26
PyObject* FNePyStruct_SlateApplication_OnShutdown(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().OnShutdown();
	Py_RETURN_NONE;
}
#endif

PyObject* FNePyStruct_SlateApplication_CloseAllWindowsImmediately(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().CloseAllWindowsImmediately();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_DestroyWindowsImmediately(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().DestroyWindowsImmediately();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_QueryCursor(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().QueryCursor();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_CloseToolTip(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().CloseToolTip();
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_UpdateToolTip(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bAllowSpawningOfNewToolTips;
	if (!NePyBase::ToCpp(PyArgs[0], bAllowSpawningOfNewToolTips))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bAllowSpawningOfNewToolTips' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().UpdateToolTip(bAllowSpawningOfNewToolTips);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_IsFakingTouchEvents(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsFakingTouchEvents();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_SetGameIsFakingTouchEvents(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[2] = {nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OO:SetGameIsFakingTouchEvents", &PyArgs[0], &PyArgs[1]))
	{
		return nullptr;
	}

	bool bIsFaking;
	if (!NePyBase::ToCpp(PyArgs[0], bIsFaking))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bIsFaking' must have type 'bool'");
		return nullptr;
	}

	FVector2D* CursorLocation;
	if (FNePyStruct_Vector2D* PyCursorLocation = NePyStructCheck_Vector2D(PyArgs[1]))
	{
		CursorLocation = &PyCursorLocation->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'CursorLocation' must have type 'Vector2D'");
		return nullptr;
	}

	FSlateApplication::Get().SetGameIsFakingTouchEvents(bIsFaking, CursorLocation);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_GetLastUserInteractionTime(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetLastUserInteractionTime();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetDragTriggerDistance(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetDragTriggerDistance();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetDragTriggerDistanceSquared(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetDragTriggerDistanceSquared();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_SetDragTriggerDistance(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	float ScreenPixels;
	if (!NePyBase::ToCpp(PyArgs[0], ScreenPixels))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'ScreenPixels' must have type 'float'");
		return nullptr;
	}

	FSlateApplication::Get().SetDragTriggerDistance(ScreenPixels);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_SetCursorRadius(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	float NewRadius;
	if (!NePyBase::ToCpp(PyArgs[0], NewRadius))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'NewRadius' must have type 'float'");
		return nullptr;
	}

	FSlateApplication::Get().SetCursorRadius(NewRadius);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_GetCursorRadius(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetCursorRadius();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_SetAllowTooltips(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	bool bCanShow;
	if (!NePyBase::ToCpp(PyArgs[0], bCanShow))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'bCanShow' must have type 'bool'");
		return nullptr;
	}

	FSlateApplication::Get().SetAllowTooltips(bCanShow);
	Py_RETURN_NONE;
}

PyObject* FNePyStruct_SlateApplication_GetAllowTooltips(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetAllowTooltips();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsRenderingOffScreen(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsRenderingOffScreen();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsActive(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsActive();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetCurrentTime(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetCurrentTime();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetApplicationScale(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetApplicationScale();

	PyObject* PyRetVal0 = PyFloat_FromDouble(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetSoftwareCursorAvailable(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetSoftwareCursorAvailable();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetCursorPos(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetCursorPos();

	PyObject* PyRetVal0 = NePyStructNew_Vector2D(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetLastCursorPos(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetLastCursorPos();

	PyObject* PyRetVal0 = NePyStructNew_Vector2D(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetCursorSize(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetCursorSize();

	PyObject* PyRetVal0 = NePyStructNew_Vector2D(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_HasAnyMouseCaptor(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().HasAnyMouseCaptor();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_HasUserMouseCapture(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 UserIndex;
	if (!NePyBase::ToCpp(PyArgs[0], UserIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'UserIndex' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().HasUserMouseCapture(UserIndex);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_IsExternalUIOpened(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().IsExternalUIOpened();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnKeyDown(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnKeyDown", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	int32 KeyCode;
	if (!NePyBase::ToCpp(PyArgs[0], KeyCode))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'KeyCode' must have type 'int'");
		return nullptr;
	}

	uint32 CharacterCode;
	if (!NePyBase::ToCpp(PyArgs[1], CharacterCode))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'CharacterCode' must have type 'int'");
		return nullptr;
	}

	bool IsRepeat;
	if (!NePyBase::ToCpp(PyArgs[2], IsRepeat))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'IsRepeat' must have type 'bool'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnKeyDown(KeyCode, CharacterCode, IsRepeat);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnKeyUp(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnKeyUp", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	int32 KeyCode;
	if (!NePyBase::ToCpp(PyArgs[0], KeyCode))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'KeyCode' must have type 'int'");
		return nullptr;
	}

	uint32 CharacterCode;
	if (!NePyBase::ToCpp(PyArgs[1], CharacterCode))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'CharacterCode' must have type 'int'");
		return nullptr;
	}

	bool IsRepeat;
	if (!NePyBase::ToCpp(PyArgs[2], IsRepeat))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'IsRepeat' must have type 'bool'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnKeyUp(KeyCode, CharacterCode, IsRepeat);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnInputLanguageChanged(FNePyStruct_SlateApplication* InSelf)
{
	FSlateApplication::Get().OnInputLanguageChanged();
	Py_RETURN_NONE;
}



PyObject* FNePyStruct_SlateApplication_OnMouseMove(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().OnMouseMove();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnRawMouseMove(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[2] = {nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OO:OnRawMouseMove", &PyArgs[0], &PyArgs[1]))
	{
		return nullptr;
	}

	int32 X;
	if (!NePyBase::ToCpp(PyArgs[0], X))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'X' must have type 'int'");
		return nullptr;
	}

	int32 Y;
	if (!NePyBase::ToCpp(PyArgs[1], Y))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'Y' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnRawMouseMove(X, Y);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnCursorSet(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().OnCursorSet();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnControllerAnalog(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnControllerAnalog", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	FName KeyName;
	if (!NePyBase::ToCpp(PyArgs[0], KeyName))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'KeyName' must have type 'FName'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[1], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'ControllerId' must have type 'int'");
		return nullptr;
	}

	float AnalogValue;
	if (!NePyBase::ToCpp(PyArgs[2], AnalogValue))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'AnalogValue' must have type 'float'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnControllerAnalog(KeyName, ControllerId, AnalogValue);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnControllerButtonPressed(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnControllerButtonPressed", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	FName KeyName;
	if (!NePyBase::ToCpp(PyArgs[0], KeyName))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'KeyName' must have type 'FName'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[1], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'ControllerId' must have type 'int'");
		return nullptr;
	}

	bool IsRepeat;
	if (!NePyBase::ToCpp(PyArgs[2], IsRepeat))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'IsRepeat' must have type 'bool'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnControllerButtonPressed(KeyName, ControllerId, IsRepeat);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnControllerButtonReleased(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnControllerButtonReleased", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	FName KeyName;
	if (!NePyBase::ToCpp(PyArgs[0], KeyName))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'KeyName' must have type 'FName'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[1], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'ControllerId' must have type 'int'");
		return nullptr;
	}

	bool IsRepeat;
	if (!NePyBase::ToCpp(PyArgs[2], IsRepeat))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'IsRepeat' must have type 'bool'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnControllerButtonReleased(KeyName, ControllerId, IsRepeat);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}


PyObject* FNePyStruct_SlateApplication_OnTouchMoved(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[4] = {nullptr, nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOOO:OnTouchMoved", &PyArgs[0], &PyArgs[1], &PyArgs[2], &PyArgs[3]))
	{
		return nullptr;
	}

	FVector2D* Location;
	if (FNePyStruct_Vector2D* PyLocation = NePyStructCheck_Vector2D(PyArgs[0]))
	{
		Location = &PyLocation->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'Location' must have type 'Vector2D'");
		return nullptr;
	}

	float Force;
	if (!NePyBase::ToCpp(PyArgs[1], Force))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'Force' must have type 'float'");
		return nullptr;
	}

	int32 TouchIndex;
	if (!NePyBase::ToCpp(PyArgs[2], TouchIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'TouchIndex' must have type 'int'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[3], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg4 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnTouchMoved(*Location, Force, TouchIndex, ControllerId);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnTouchEnded(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[3] = {nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOO:OnTouchEnded", &PyArgs[0], &PyArgs[1], &PyArgs[2]))
	{
		return nullptr;
	}

	FVector2D* Location;
	if (FNePyStruct_Vector2D* PyLocation = NePyStructCheck_Vector2D(PyArgs[0]))
	{
		Location = &PyLocation->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'Location' must have type 'Vector2D'");
		return nullptr;
	}

	int32 TouchIndex;
	if (!NePyBase::ToCpp(PyArgs[1], TouchIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'TouchIndex' must have type 'int'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[2], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnTouchEnded(*Location, TouchIndex, ControllerId);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnTouchForceChanged(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[4] = {nullptr, nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOOO:OnTouchForceChanged", &PyArgs[0], &PyArgs[1], &PyArgs[2], &PyArgs[3]))
	{
		return nullptr;
	}

	FVector2D* Location;
	if (FNePyStruct_Vector2D* PyLocation = NePyStructCheck_Vector2D(PyArgs[0]))
	{
		Location = &PyLocation->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'Location' must have type 'Vector2D'");
		return nullptr;
	}

	float Force;
	if (!NePyBase::ToCpp(PyArgs[1], Force))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'Force' must have type 'float'");
		return nullptr;
	}

	int32 TouchIndex;
	if (!NePyBase::ToCpp(PyArgs[2], TouchIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'TouchIndex' must have type 'int'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[3], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg4 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnTouchForceChanged(*Location, Force, TouchIndex, ControllerId);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnTouchFirstMove(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[4] = {nullptr, nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOOO:OnTouchFirstMove", &PyArgs[0], &PyArgs[1], &PyArgs[2], &PyArgs[3]))
	{
		return nullptr;
	}

	FVector2D* Location;
	if (FNePyStruct_Vector2D* PyLocation = NePyStructCheck_Vector2D(PyArgs[0]))
	{
		Location = &PyLocation->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'Location' must have type 'Vector2D'");
		return nullptr;
	}

	float Force;
	if (!NePyBase::ToCpp(PyArgs[1], Force))
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'Force' must have type 'float'");
		return nullptr;
	}

	int32 TouchIndex;
	if (!NePyBase::ToCpp(PyArgs[2], TouchIndex))
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'TouchIndex' must have type 'int'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[3], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg4 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnTouchFirstMove(*Location, Force, TouchIndex, ControllerId);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_OnMotionDetected(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs)
{
	PyObject* PyArgs[5] = {nullptr, nullptr, nullptr, nullptr, nullptr};
	if (!PyArg_ParseTuple(InArgs, "OOOOO:OnMotionDetected", &PyArgs[0], &PyArgs[1], &PyArgs[2], &PyArgs[3], &PyArgs[4]))
	{
		return nullptr;
	}

	FVector* Tilt;
	if (FNePyStruct_Vector* PyTilt = NePyStructCheck_Vector(PyArgs[0]))
	{
		Tilt = &PyTilt->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'Tilt' must have type 'Vector'");
		return nullptr;
	}

	FVector* RotationRate;
	if (FNePyStruct_Vector* PyRotationRate = NePyStructCheck_Vector(PyArgs[1]))
	{
		RotationRate = &PyRotationRate->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg2 'RotationRate' must have type 'Vector'");
		return nullptr;
	}

	FVector* Gravity;
	if (FNePyStruct_Vector* PyGravity = NePyStructCheck_Vector(PyArgs[2]))
	{
		Gravity = &PyGravity->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg3 'Gravity' must have type 'Vector'");
		return nullptr;
	}

	FVector* Acceleration;
	if (FNePyStruct_Vector* PyAcceleration = NePyStructCheck_Vector(PyArgs[3]))
	{
		Acceleration = &PyAcceleration->Value;
	}
	else
	{
		PyErr_SetString(PyExc_TypeError, "arg4 'Acceleration' must have type 'Vector'");
		return nullptr;
	}

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[4], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg5 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().OnMotionDetected(*Tilt, *RotationRate, *Gravity, *Acceleration, ControllerId);

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}


PyObject* FNePyStruct_SlateApplication_OnConvertibleLaptopModeChanged(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().OnConvertibleLaptopModeChanged();

	PyObject* PyRetVal0 = PyBool_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetUserIndexForMouse(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetUserIndexForMouse();

	PyObject* PyRetVal0 = PyLong_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetUserIndexForKeyboard(FNePyStruct_SlateApplication* InSelf)
{
	auto RetVal = FSlateApplication::Get().GetUserIndexForKeyboard();

	PyObject* PyRetVal0 = PyLong_FromLong(RetVal);
	return PyRetVal0;
}

PyObject* FNePyStruct_SlateApplication_GetUserIndexForController(FNePyStruct_SlateApplication* InSelf, PyObject* InArg)
{
	PyObject* PyArgs[1] = {InArg};

	int32 ControllerId;
	if (!NePyBase::ToCpp(PyArgs[0], ControllerId))
	{
		PyErr_SetString(PyExc_TypeError, "arg1 'ControllerId' must have type 'int'");
		return nullptr;
	}

	auto RetVal = FSlateApplication::Get().GetUserIndexForController(ControllerId);

	PyObject* PyRetVal0 = PyLong_FromLong(RetVal);
	return PyRetVal0;
}

// region func body end

static PyMethodDef FNePyStructType_SlateApplication_methods[] = {
	{"GetAverageDeltaTime", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetAverageDeltaTime), METH_NOARGS | METH_CLASS, ""},
	{"GetDeltaTime", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetDeltaTime), METH_NOARGS | METH_CLASS, ""},
	{"GetAverageDeltaTimeForResponsiveness", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetAverageDeltaTimeForResponsiveness), METH_NOARGS | METH_CLASS, ""},
	{"Create", NePyCFunctionCast(&FNePyStruct_SlateApplication_Create), METH_NOARGS | METH_CLASS, ""},
	{"IsInitialized", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsInitialized), METH_NOARGS | METH_CLASS, ""},
	{"Shutdown", NePyCFunctionCast(&FNePyStruct_SlateApplication_Shutdown), METH_O | METH_CLASS, ""},
	{"InitHighDPI", NePyCFunctionCast(&FNePyStruct_SlateApplication_InitHighDPI), METH_O | METH_CLASS, ""},
#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION < 26
	{"DestroyRenderer", NePyCFunctionCast(&FNePyStruct_SlateApplication_DestroyRenderer), METH_NOARGS | METH_CLASS, ""},
#endif
	{"SupportsSystemHelp", NePyCFunctionCast(&FNePyStruct_SlateApplication_SupportsSystemHelp), METH_NOARGS | METH_CLASS, ""},
	{"ShowSystemHelp", NePyCFunctionCast(&FNePyStruct_SlateApplication_ShowSystemHelp), METH_NOARGS | METH_CLASS, ""},
	{"SetCursorPos", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetCursorPos), METH_O | METH_CLASS, ""},
	{"PollGameDeviceState", NePyCFunctionCast(&FNePyStruct_SlateApplication_PollGameDeviceState), METH_NOARGS | METH_CLASS, ""},
	{"FinishedInputThisFrame", NePyCFunctionCast(&FNePyStruct_SlateApplication_FinishedInputThisFrame), METH_NOARGS | METH_CLASS, ""},
	{"Tick", NePyCFunctionCast(&FNePyStruct_SlateApplication_Tick), METH_O | METH_CLASS, ""},
	{"PumpMessages", NePyCFunctionCast(&FNePyStruct_SlateApplication_PumpMessages), METH_NOARGS | METH_CLASS, ""},
	{"CanAddModalWindow", NePyCFunctionCast(&FNePyStruct_SlateApplication_CanAddModalWindow), METH_NOARGS | METH_CLASS, ""},
	{"CanDisplayWindows", NePyCFunctionCast(&FNePyStruct_SlateApplication_CanDisplayWindows), METH_NOARGS | METH_CLASS, ""},
	{"AnyMenusVisible", NePyCFunctionCast(&FNePyStruct_SlateApplication_AnyMenusVisible), METH_NOARGS | METH_CLASS, ""},
	{"DismissAllMenus", NePyCFunctionCast(&FNePyStruct_SlateApplication_DismissAllMenus), METH_NOARGS | METH_CLASS, ""},
	{"ExternalModalStart", NePyCFunctionCast(&FNePyStruct_SlateApplication_ExternalModalStart), METH_NOARGS | METH_CLASS, ""},
	{"ExternalModalStop", NePyCFunctionCast(&FNePyStruct_SlateApplication_ExternalModalStop), METH_NOARGS | METH_CLASS, ""},
	{"InvalidateAllViewports", NePyCFunctionCast(&FNePyStruct_SlateApplication_InvalidateAllViewports), METH_NOARGS | METH_CLASS, ""},
	{"UnregisterGameViewport", NePyCFunctionCast(&FNePyStruct_SlateApplication_UnregisterGameViewport), METH_NOARGS | METH_CLASS, ""},
	{"FlushRenderState", NePyCFunctionCast(&FNePyStruct_SlateApplication_FlushRenderState), METH_NOARGS | METH_CLASS, ""},
	{"SetUserFocusToGameViewport", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetUserFocusToGameViewport), METH_VARARGS | METH_CLASS, ""},
	{"SetAllUserFocusToGameViewport", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetAllUserFocusToGameViewport), METH_O | METH_CLASS, ""},
	{"ActivateGameViewport", NePyCFunctionCast(&FNePyStruct_SlateApplication_ActivateGameViewport), METH_NOARGS | METH_CLASS, ""},
	{"ClearUserFocus", NePyCFunctionCast(&FNePyStruct_SlateApplication_ClearUserFocus), METH_VARARGS | METH_CLASS, ""},
	{"ClearAllUserFocus", NePyCFunctionCast(&FNePyStruct_SlateApplication_ClearAllUserFocus), METH_O | METH_CLASS, ""},
	{"ClearKeyboardFocus", NePyCFunctionCast(&FNePyStruct_SlateApplication_ClearKeyboardFocus), METH_O | METH_CLASS, ""},
	{"ResetToDefaultInputSettings", NePyCFunctionCast(&FNePyStruct_SlateApplication_ResetToDefaultInputSettings), METH_NOARGS | METH_CLASS, ""},
	{"ResetToDefaultPointerInputSettings", NePyCFunctionCast(&FNePyStruct_SlateApplication_ResetToDefaultPointerInputSettings), METH_NOARGS | METH_CLASS, ""},
	{"ReleaseAllPointerCapture", NePyCFunctionCast(&FNePyStruct_SlateApplication_ReleaseAllPointerCapture), METH_VARARGS | METH_CLASS, ""},
#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION < 23
	{"ReleaseMouseCapture", NePyCFunctionCast(&FNePyStruct_SlateApplication_ReleaseMouseCapture), METH_NOARGS | METH_CLASS, ""},
#endif
#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION < 23
	{"ReleaseMouseCaptureForUser", NePyCFunctionCast(&FNePyStruct_SlateApplication_ReleaseMouseCaptureForUser), METH_O | METH_CLASS, ""},
#endif
	{"IsUsingHighPrecisionMouseMovment", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsUsingHighPrecisionMouseMovment), METH_NOARGS | METH_CLASS, ""},
	{"IsUsingTrackpad", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsUsingTrackpad), METH_NOARGS | METH_CLASS, ""},
	{"IsMouseAttached", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsMouseAttached), METH_NOARGS | METH_CLASS, ""},
	{"IsGamepadAttached", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsGamepadAttached), METH_NOARGS | METH_CLASS, ""},
	{"SetApplicationScale", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetApplicationScale), METH_O | METH_CLASS, ""},
	{"IsDragDropping", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsDragDropping), METH_NOARGS | METH_CLASS, ""},
	{"CancelDragDrop", NePyCFunctionCast(&FNePyStruct_SlateApplication_CancelDragDrop), METH_NOARGS | METH_CLASS, ""},
	{"IsNormalExecution", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsNormalExecution), METH_NOARGS | METH_CLASS, ""},
	{"InKismetDebuggingMode", NePyCFunctionCast(&FNePyStruct_SlateApplication_InKismetDebuggingMode), METH_NOARGS | METH_CLASS, ""},
	{"EnterDebuggingMode", NePyCFunctionCast(&FNePyStruct_SlateApplication_EnterDebuggingMode), METH_NOARGS | METH_CLASS, ""},
	{"LeaveDebuggingMode", NePyCFunctionCast(&FNePyStruct_SlateApplication_LeaveDebuggingMode), METH_O | METH_CLASS, ""},
	{"IsRunningAtTargetFrameRate", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsRunningAtTargetFrameRate), METH_NOARGS | METH_CLASS, ""},
	{"AreMenuAnimationsEnabled", NePyCFunctionCast(&FNePyStruct_SlateApplication_AreMenuAnimationsEnabled), METH_NOARGS | METH_CLASS, ""},
	{"EnableMenuAnimations", NePyCFunctionCast(&FNePyStruct_SlateApplication_EnableMenuAnimations), METH_O | METH_CLASS, ""},
	{"ExternalUIChange", NePyCFunctionCast(&FNePyStruct_SlateApplication_ExternalUIChange), METH_O | METH_CLASS, ""},
	{"AllowMoveCursor", NePyCFunctionCast(&FNePyStruct_SlateApplication_AllowMoveCursor), METH_NOARGS | METH_CLASS, ""},
	{"NativeApp_ShowKeyboard", NePyCFunctionCast(&FNePyStruct_SlateApplication_NativeApp_ShowKeyboard), METH_VARARGS | METH_CLASS, ""},
	{"SupportsSourceAccess", NePyCFunctionCast(&FNePyStruct_SlateApplication_SupportsSourceAccess), METH_NOARGS | METH_CLASS, ""},
	{"GotoLineInSource", NePyCFunctionCast(&FNePyStruct_SlateApplication_GotoLineInSource), METH_VARARGS | METH_CLASS, ""},
	{"UnregisterUser", NePyCFunctionCast(&FNePyStruct_SlateApplication_UnregisterUser), METH_O | METH_CLASS, ""},
	{"ProcessApplicationActivationEvent", NePyCFunctionCast(&FNePyStruct_SlateApplication_ProcessApplicationActivationEvent), METH_O | METH_CLASS, ""},
	{"IsProcessingInput", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsProcessingInput), METH_NOARGS | METH_CLASS, ""},
#if ENGINE_MAJOR_VERSION <= 4 && ENGINE_MINOR_VERSION < 26
	{"OnShutdown", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnShutdown), METH_NOARGS | METH_CLASS, ""},
#endif
	{"CloseAllWindowsImmediately", NePyCFunctionCast(&FNePyStruct_SlateApplication_CloseAllWindowsImmediately), METH_NOARGS | METH_CLASS, ""},
	{"DestroyWindowsImmediately", NePyCFunctionCast(&FNePyStruct_SlateApplication_DestroyWindowsImmediately), METH_NOARGS | METH_CLASS, ""},
	{"QueryCursor", NePyCFunctionCast(&FNePyStruct_SlateApplication_QueryCursor), METH_NOARGS | METH_CLASS, ""},
	{"CloseToolTip", NePyCFunctionCast(&FNePyStruct_SlateApplication_CloseToolTip), METH_NOARGS | METH_CLASS, ""},
	{"UpdateToolTip", NePyCFunctionCast(&FNePyStruct_SlateApplication_UpdateToolTip), METH_O | METH_CLASS, ""},
	{"IsFakingTouchEvents", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsFakingTouchEvents), METH_NOARGS | METH_CLASS, ""},
	{"SetGameIsFakingTouchEvents", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetGameIsFakingTouchEvents), METH_VARARGS | METH_CLASS, ""},
	{"GetLastUserInteractionTime", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetLastUserInteractionTime), METH_NOARGS | METH_CLASS, ""},
	{"GetDragTriggerDistance", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetDragTriggerDistance), METH_NOARGS | METH_CLASS, ""},
	{"GetDragTriggerDistanceSquared", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetDragTriggerDistanceSquared), METH_NOARGS | METH_CLASS, ""},
	{"SetDragTriggerDistance", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetDragTriggerDistance), METH_O | METH_CLASS, ""},
	{"SetCursorRadius", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetCursorRadius), METH_O | METH_CLASS, ""},
	{"GetCursorRadius", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetCursorRadius), METH_NOARGS | METH_CLASS, ""},
	{"SetAllowTooltips", NePyCFunctionCast(&FNePyStruct_SlateApplication_SetAllowTooltips), METH_O | METH_CLASS, ""},
	{"GetAllowTooltips", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetAllowTooltips), METH_NOARGS | METH_CLASS, ""},
	{"IsRenderingOffScreen", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsRenderingOffScreen), METH_NOARGS | METH_CLASS, ""},
	{"IsActive", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsActive), METH_NOARGS | METH_CLASS, ""},
	{"GetCurrentTime", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetCurrentTime), METH_NOARGS | METH_CLASS, ""},
	{"GetApplicationScale", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetApplicationScale), METH_NOARGS | METH_CLASS, ""},
	{"GetSoftwareCursorAvailable", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetSoftwareCursorAvailable), METH_NOARGS | METH_CLASS, ""},
	{"GetCursorPos", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetCursorPos), METH_NOARGS | METH_CLASS, ""},
	{"GetLastCursorPos", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetLastCursorPos), METH_NOARGS | METH_CLASS, ""},
	{"GetCursorSize", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetCursorSize), METH_NOARGS | METH_CLASS, ""},
	{"HasAnyMouseCaptor", NePyCFunctionCast(&FNePyStruct_SlateApplication_HasAnyMouseCaptor), METH_NOARGS | METH_CLASS, ""},
	{"HasUserMouseCapture", NePyCFunctionCast(&FNePyStruct_SlateApplication_HasUserMouseCapture), METH_O | METH_CLASS, ""},
	{"IsExternalUIOpened", NePyCFunctionCast(&FNePyStruct_SlateApplication_IsExternalUIOpened), METH_NOARGS | METH_CLASS, ""},
	{"OnKeyDown", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnKeyDown), METH_VARARGS | METH_CLASS, ""},
	{"OnKeyUp", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnKeyUp), METH_VARARGS | METH_CLASS, ""},
	{"OnInputLanguageChanged", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnInputLanguageChanged), METH_NOARGS | METH_CLASS, ""},
	{"OnMouseMove", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnMouseMove), METH_NOARGS | METH_CLASS, ""},
	{"OnRawMouseMove", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnRawMouseMove), METH_VARARGS | METH_CLASS, ""},
	{"OnCursorSet", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnCursorSet), METH_NOARGS | METH_CLASS, ""},
	{"OnControllerAnalog", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnControllerAnalog), METH_VARARGS | METH_CLASS, ""},
	{"OnControllerButtonPressed", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnControllerButtonPressed), METH_VARARGS | METH_CLASS, ""},
	{"OnControllerButtonReleased", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnControllerButtonReleased), METH_VARARGS | METH_CLASS, ""},
	{"OnTouchMoved", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnTouchMoved), METH_VARARGS | METH_CLASS, ""},
	{"OnTouchEnded", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnTouchEnded), METH_VARARGS | METH_CLASS, ""},
	{"OnTouchForceChanged", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnTouchForceChanged), METH_VARARGS | METH_CLASS, ""},
	{"OnTouchFirstMove", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnTouchFirstMove), METH_VARARGS | METH_CLASS, ""},
	{"OnMotionDetected", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnMotionDetected), METH_VARARGS | METH_CLASS, ""},
	{"OnConvertibleLaptopModeChanged", NePyCFunctionCast(&FNePyStruct_SlateApplication_OnConvertibleLaptopModeChanged), METH_NOARGS | METH_CLASS, ""},
	{"GetUserIndexForMouse", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetUserIndexForMouse), METH_NOARGS | METH_CLASS, ""},
	{"GetUserIndexForKeyboard", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetUserIndexForKeyboard), METH_NOARGS | METH_CLASS, ""},
	{"GetUserIndexForController", NePyCFunctionCast(&FNePyStruct_SlateApplication_GetUserIndexForController), METH_O | METH_CLASS, ""},
	{ NULL } /* Sentinel */
};

static void FNePyStructSlateApplication_Dealloc(PyObject* InSelf)
{
	InSelf->ob_type->tp_free(InSelf);
}

static int FNePyStructSlateApplication_Init(FNePyStruct_SlateApplication* InSelf, PyObject* InArgs, PyObject* InKwds)
{
	PyErr_SetString(PyExc_Exception, "SlateApplication is a singleton");
	return -1;
}

static PyObject* FNePyStructSlateApplication_Repr(PyObject* InSelf)
{
	return PyUnicode_FromFormat("<%s at %p>", InSelf->ob_type->tp_name, InSelf);
}
#endif // WITH_NEPY_AUTO_EXPORT

void NePyInitStruct_SlateApplication(PyObject* PyOuterModule)
{
#if WITH_NEPY_AUTO_EXPORT
	PyTypeObject* NePyStructType = &FNePyStructType_SlateApplication;
	NePyStructType->tp_flags = Py_TPFLAGS_DEFAULT;
	NePyStructType->tp_new = PyType_GenericNew;
	NePyStructType->tp_dealloc = (destructor)&FNePyStructSlateApplication_Dealloc;
	NePyStructType->tp_init = (initproc)&FNePyStructSlateApplication_Init;
	NePyStructType->tp_repr = (reprfunc)&FNePyStructSlateApplication_Repr;
	NePyStructType->tp_str = (reprfunc)&FNePyStructSlateApplication_Repr;
	NePyStructType->tp_getset = FNePyStructType_SlateApplication_getset;
	NePyStructType->tp_methods = FNePyStructType_SlateApplication_methods;
	PyType_Ready(NePyStructType);

	Py_INCREF(NePyStructType);
	PyModule_AddObject(PyOuterModule, "SlateApplication", (PyObject*)NePyStructType);
#endif
}
